* [ ] share logic between pipelines for descriptors
* [ ] common data structure with ray buffer and different buffer regions
* [ ] integrate tracy!
    * [ ] basic cpu integration as the rest of codebase
    * [ ] gpu using vulkan queries?
* [ ] static command buffers + handle of window rescale + changin rt settings (rerecord on demand)
* [ ] implement all steps/stages
    * [x] emit
    * [ ] traverse 
        * [x] ray properly traverse grid and sub grid
        * [x] refactor hit record according to TODO in assets\shaders\raytracing\ray_commons.glsl
        * [x] 1 bit set/unset brick buffer
        * [x] move out cursor to begining of buffer
        * [x] hit data is stored in a buffer for a scatter shader to work with
        * [x] loop RayBufferInfo and BrickBufferInfo for descriptor creation
        * [ ] Brick buffer should be index to actual brick data stored in separate buffer 
        * [ ] fix bending cubes made apparent by larger grid scale (probably caused by incorrect t_value?)
    * [x] miss pipeline
    * [ ] scatter pipeline
        * [ ] ability to tie hit record
    * [x] draw ray pipeline
        * [x] resolve RC (flickering) and bottom of image missing output
        * [x] draw misses as well as hits ~~(requires another cursor) (just add some push constant)~~
* [ ] potentially use a single command buffer? (only record it in individual buffers)
* [x] only one atomicAdd pr warp, use shared memory to share start index with threads that use thread id + warp offset to grab rays
* [ ] t_min + t_max limits in gui and camera
* [ ] shared resources set up
* [ ] dedicated cursors for each pipelines to ensure race safety
* [ ] rename draw_rays stage to draw
* [ ] proccess rays independent of image_size: vk.Extent2D
* [ ] Tone mapping with exposure step: https://bruop.github.io/exposure/
* [ ] figure out sensible way of dealing with shadow rays
* [ ] Gpu memory should be handled outside of pipelines (Ray and brick memory)
    * [ ] have GlobalBufferInfo + (Stage)BufferInfo with mappings from global to stage info
    * [ ] move DescriptorBufferInfo stuff out of the pipelines and deal what that in one module in the code for easier readability 
* [ ] Merge common data points of Ray and Hit Record into separate buffer to save memory bandwith. Potentail race condtions must also be considered!
* [ ] Map one stage to one queue
* [ ] Define stage number for each pipeline in a central location
* [ ] ~~Only do one vkQueueSubmit per bounce (submit all stages at once)~~ Since we plan different queue between each stage we cant do this :(
* [ ] Replace timeline semaphore syncing with normal memory barriers!



