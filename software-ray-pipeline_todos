* [ ] share logic between pipelines for descriptors
* [ ] common data structure with ray buffer and different buffer regions
* [ ] integrate tracy!
* [ ] only use one submit call
    * [ ] replace semaphores with pipeline barrier
* [ ] static command buffers + handle of window rescale + changin rt settings (rerecord on demand)
* [ ] implement all steps/stages
    * [x] emit
    * [ ] traverse 
        * [x] ray properly traverse grid and sub grid
        * [x] refactor hit record according to TODO in assets\shaders\raytracing\ray_commons.glsl
        * [x] 1 bit set/unset brick buffer
        * [x] move out cursor to begining of buffer
        * [x] hit data is stored in a buffer for a scatter shader to work with
        * [ ] loop RayBufferInfo and BrickBufferInfo for descriptor creation
        * [ ] fix bending cubes made apparent by larger grid scale (probably caused by incorrect t_value?)
    * [ ] miss pipeline
    * [ ] scatter pipeline
        * [ ] ability to tie hit record
    * [x] draw ray pipeline
        * [x] resolve RC (flickering) and bottom of image missing output
* [ ] potentially use a single command buffer? (only record it in individual buffers)
* [x] only one atomicAdd pr warp, use shared memory to share start index with threads that use thread id + warp offset to grab rays
* [ ] t_min + t_max limits in gui and camera
* [ ] shared resources set up





