#version 450

#extension GL_EXT_debug_printf : disable
// debugPrintfEXT("hello world %f", 1.0);

// This extension is strictly not required for vulkan 1.2 target, but is used to silence validator...
#extension GL_GOOGLE_include_directive : enable
#include "ray_commons.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(Rgba8, set = 0, binding = 0) uniform writeonly image2D img_output;

layout (std430, set = 1, binding = 0) readonly buffer HitLimitBuffer {
    HitLimits limits;
};
layout (std430, set = 2, binding = 0) readonly buffer RayShadingBuffer {
    RayShading ray_shadings[];
};

// TODO: https://bruop.github.io/exposure/
// source: https://www.shadertoy.com/view/WdjSW3
vec3 Tonemap_ACES(vec3 x) {
    // Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
    const vec3 a = vec3(2.51);
    const vec3 b = vec3(0.03);
    const vec3 c = vec3(2.43);
    const vec3 d = vec3(0.59);
    const vec3 e = vec3(0.14);
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

void main() {
    const uint index = gl_GlobalInvocationID.x;
    if (index > limits.emitted_hit_count) {
        return;
    }

    const RayShading ray_shading = ray_shadings[index];
    const ivec2 pixel_coord = ivec2(
        bitfieldExtract(ray_shading.pixel_coord, 16, 16),
        bitfieldExtract(ray_shading.pixel_coord, 0, 16)
    );
    imageStore(img_output, pixel_coord, vec4(ray_shading.color, 1.0));
}

