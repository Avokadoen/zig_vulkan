#version 450

#extension GL_EXT_debug_printf : disable
// debugPrintfEXT("hello world %f", 1.0);

#include "ray_commons.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout (std430, set = 0, binding = 0) readonly buffer HitLimitBuffer {
    HitLimits limits;
};
layout (std430, set = 1, binding = 0) readonly buffer RayBuffer {
    Ray rays[];
};
layout (std430, set = 2, binding = 0) buffer RayShadingBuffer {
    RayShading ray_shadings[];
};

const vec3 start_value = vec3(1);
const vec3 end_value = vec3(0.5, 0.7, 1.0);

void main() {
    const uint index = gl_GlobalInvocationID.x + limits.out_hit_count;
    if (index >= limits.in_hit_count) {
        return;
    }

    Ray ray = rays[index];

    // Check if ray has not been tagged as aborted
    const uint abort_ray = bitfieldExtract(
        ray.internal_reflection_16b_abort_ray_1b_skip_first_voxel_1b_padding_14b,
        ABORT_RAY_OFFSET,
        ABORT_RAY_SIZE
    );

    if (abort_ray != 1) {
        // calculate some sky color in the event of a miss
        float y_factor = 0.5 * (ray.direction.y + 1.0);
        ray_shadings[index].color *= vec3(1.0 - y_factor) * start_value + y_factor * end_value;
    }
}
