#version 450

#extension GL_EXT_debug_printf : disable
// debugPrintfEXT("hello world %f", 1.0);

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require

// This extension is strictly not required for vulkan 1.2 target, but is used to silence validator...
#extension GL_GOOGLE_include_directive : enable
#include "rand.comp"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;
layout(Rgba8, binding = 0) uniform writeonly image2D img_output;

#define BIG_NUMBER 1e30
#define AMBIENT vec3(0.005)
#define PRECISION 0.000001
 
// Constants
const uint MAT_LAMBERTIAN = 0;
const uint MAT_METAL = 1;
const uint MAT_DIELECTRIC = 2;
const uint MAT_NONE = 3;

// See glsl 4.40 spec chapter 4.7.1 for info on infinity
// https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.40.pdf
const float infinity = 0.001 / 0;
const float pi = 3.14159265358; // 3.1415926535897932385
const float faccuracy = 0.000001;

bool IsNearZero(vec3 v) {
    return (abs(v.x) < faccuracy) && (abs(v.y) < faccuracy) && (abs(v.z) < faccuracy);
}

struct Ray {
    vec3 origin;
    vec3 direction;
    float internal_reflection;
    uint ignore_type_material;
};
Ray CreateRay(vec3 origin, vec3 direction);
vec3 RayAt(Ray r, float t);
vec3 RayColor(Ray r);

struct HitRecord {
    vec3 point;
    vec3 normal;
    float t;
    uint index; 
};

layout (constant_id = 2) const uint brick_bits = 0U;
layout (constant_id = 3) const uint brick_bytes = 0U;
layout (constant_id = 4) const int brick_dimensions = 0;
layout (constant_id = 5) const float brick_voxel_scale = 0.;

layout (push_constant) uniform PushConstants {
    // Camera
    uint image_width;
    uint image_height;
    vec3 horizontal;
    vec3 vertical;
    vec3 lower_left_corner;
    vec3 origin;
    float paddin;
    int samples_per_pixel;
    int max_bounce;

    // Sun
    vec3 sun_position;
    uint sun_enabled;
    vec3 sun_color; 
    float sun_radius;
} push_constant;
Ray CameraGetRay(float u, float v);


layout (binding = 1) uniform BrickGridState {
    // how many voxels in each axis
    uint voxel_dim_x;
    uint voxel_dim_y;
    uint voxel_dim_z;
    // how many bricks in each axis
    uint dim_x;
    uint dim_y;
    uint dim_z;
    // how many higher order entries in each axis
    uint higher_dim_x;
    uint higher_dim_y;
    uint higher_dim_z;

    uint padding1; // not in use
    uint padding2; // not in use
    uint padding3; // not in use

    // min point *and* base t value
    vec4 min_point_base_t;
    vec4 max_point_scale;
} brick_grid;

struct Material {
    uint type;          
    float albedo_r;
    float albedo_g;
    float albedo_b;
    // type_data: lambertian: unused, metal it's fuzz, internal reflection it's dielectric
    float type_data;
};
layout (binding = 2) buffer MaterialBuffer {
    readonly Material materials[];
};
bool ScatterLambertian(Material material, Ray r_in, HitRecord hit, out Ray scattered);
bool ScatterMetal(Material material, Ray r_in, HitRecord hit, out Ray scattered);
bool ScatterDielectric(Material material, Ray r_in, vec3 hit_c_min, HitRecord hit, out Ray scattered);

layout (binding = 3) buffer HigherGridBuffer {
    // one entry hold 4 entries
    readonly uint higher_grid_entries[];
};

layout (binding = 4) buffer GridBufferType {
    // each entry is 2 bits
    readonly uint brick_type_bits[];
};

layout (binding = 5) buffer GridBufferIndex {
    readonly uint brick_indices[];
};

const uint VOXEL_START_INDEX = 0x0;
const uint BRICK_LOD_INDEX = 0x1;

layout (binding = 6) buffer BrickOccupancyBuffer {
    readonly uint8_t brick_solid_mask[];
};

layout (binding = 7) buffer BrickMaterialIndexBuffer {
    readonly uint brick_type_and_index[];
};

layout (binding = 8) buffer MaterialIndicesBuffer {
    readonly uint8_t material_indices[];
};

bool HigherGridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit);
bool GridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit);
bool BrickHit(Ray r, float t_min, float t_max, vec3 ray_delta, ivec3 ray_step, vec3 g_scale, uint brick_index, inout vec3 brick_position, inout HitRecord hit);

// slab hit tests
bool FastInstersect(vec3 p0, vec3 p1, Ray r);
bool AdvIntersect(vec3 p0, vec3 p1, Ray r, vec3 inv_ray_dir, inout float t_min, inout float t_max);
bool AdvNormIntersect(vec3 box_min_point, vec3 box_max_point, Ray r, vec3 inv_ray_dir, out vec3 normal, inout float t_min, inout float t_max);

// TODO: higher level grid optimization
// TODO: re-enable hack in ScatterDielectric
// TODO: test splitting scale and point & base t and point in brick grid
// TODO: normals are trivially calculated in DDA ...
// TODO: plane intersection test is faster than cube
// TODO: bug with refract vs reflect in diel
// TODO: store the current chunk index we stand in for further sampling and bounces!

void main() {
    const ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const ivec2 image_size = imageSize(img_output);
    if (pixel_coord.x >= image_size.x || pixel_coord.y >= image_size.y) {
        // don't ray trace discarded pixels
        return;
    }

    vec3 color = vec3(0.0, 0.0, 0.0);
    for (int sample_i = 0; sample_i < push_constant.samples_per_pixel; sample_i++) {  
        const float x = float(pixel_coord.x);
        const float y = float(pixel_coord.y);
        // TODO: proper random (blue noise)
        // TODO: remove division
        const float noise_x = hash12(vec2(x + sample_i, y) * 0.2 * float(sample_i > 0));
        const float u = (x + noise_x) / float(push_constant.image_width - 1);
        const float noise_y = hash12(vec2(x, y + sample_i) * 0.2 * float(sample_i > 0));
        const float v = (y + noise_y) / float(push_constant.image_height - 1);
        Ray ray = CameraGetRay(u, v);
        color += RayColor(ray);
    }

    // Divide the color by the number of samples and gamma-correct for gamma=2.0.
    color = sqrt(color / push_constant.samples_per_pixel);
    imageStore(img_output, pixel_coord, vec4(color, 1.0));
}

Ray CreateRay(vec3 origin, vec3 direction) {
    const float internal_reflection = 1.0;
    const uint ignore_material = MAT_NONE;
    return Ray(origin, normalize(direction), internal_reflection, ignore_material);
}

Ray CreateShadowRay(vec3 origin, vec3 direction) {
    const float internal_reflection = 1.0;
    const uint ignore_material = (push_constant.sun_enabled > 0) ? MAT_NONE : MAT_DIELECTRIC;
    return Ray(origin, normalize(direction), internal_reflection, ignore_material);
}

vec3 RayAt(Ray r, float t) {
    // instruction for: t * dir + origin
    return fma(vec3(t), r.direction, r.origin);
}

vec3 BackgroundColor(Ray r) {
    float t = 0.5 * (r.direction.y + 1.0);
    vec3 background_color = fma(vec3(1.0 - t), vec3(1.0), t * vec3(0.5, 0.7, 1.0));
    return background_color;
}

vec3 RayColor(Ray r) {
    const bool sun_enabled = push_constant.sun_enabled > 0;

    HitRecord hit;
    
    Ray current_ray = r;
    int loop_count = 0;
    
    vec3 shadow_c_min;
    HitRecord shadow_hit;
    Ray shadow_ray;

    vec3 color = vec3(0);
    vec3 hit_v_min;

    while (loop_count < push_constant.max_bounce && GridHit(current_ray, 0.00001, infinity, hit_v_min, hit)){         
        loop_count += 1;
        Ray scattered = current_ray;
        bool result = false;

        const Material material = materials[hit.index];
        const vec3 attenuation = vec3(material.albedo_r, material.albedo_g, material.albedo_b);
        switch (material.type) {
            case MAT_LAMBERTIAN: 
                result = ScatterLambertian(material, current_ray, hit, scattered);
                break;
            case MAT_METAL: 
                result = ScatterMetal(material, current_ray, hit, scattered);
                break;
            case MAT_DIELECTRIC:
                result = ScatterDielectric(material, current_ray, hit_v_min, hit, scattered);
                break;
            default: 
                loop_count -= 1;
                result = false;
                break;
        }
        if (sun_enabled) {
            const vec3 sun_sample_position = push_constant.sun_position + RandVec3(current_ray.direction.xy + current_ray.direction.z, -push_constant.sun_radius, push_constant.sun_radius);
            const vec3 shadow_ray_dir = (sun_sample_position - hit.point);
            const vec3 shadow_origin = hit.point;
            const Ray shadow_ray = CreateShadowRay(shadow_origin, shadow_ray_dir);

            // if lit by sun
            if (!GridHit(shadow_ray, 0.00001, infinity, hit_v_min, shadow_hit)) {
                color += attenuation * push_constant.sun_color;
            }
        } else {
            color += attenuation;
        }

        // if the material scatter function report that the ray failed to scatter
        if (!result) break;

        current_ray = scattered;
    }

    if (loop_count == 0) {
        color += BackgroundColor(current_ray) * ((sun_enabled) ? push_constant.sun_color : vec3(1));
    }

    return color / (color + 1);
}

float safeInverse(float x) { return (x == 0.0) ? 1e12 : (1.0 / x); }
vec3 safeInverse(vec3 v) { return vec3(safeInverse(v.x), safeInverse(v.y), safeInverse(v.z)); }

/// Traverses the brick grid and calculates any potential hit with the grid
bool GridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit) {
    const vec3 g_min = brick_grid.min_point_base_t.xyz;
    const float b_base_t = brick_grid.min_point_base_t.w;
    const vec3 g_max = brick_grid.max_point_scale.xyz;
    const vec3 g_scale = vec3(brick_grid.max_point_scale.w);
    const ivec3 brick_dim = ivec3(brick_grid.dim_x, brick_grid.dim_y, brick_grid.dim_z);

    const vec3 inv_ray_dir = safeInverse(r.direction);

    float grid_t_min = t_min;
    float grid_t_max = t_max;
    if (!AdvNormIntersect(g_min, g_max, r, inv_ray_dir, hit.normal, grid_t_min, grid_t_max)) {
        return false;
    }

    // HACK: workaround for precision issues with t being too low for "penetrating" grid 
    float global_t_value = grid_t_min + 0.0001 * g_scale.x;

    // Perform 3DDDA, source: https://lodev.org/cgtutor/raycasting.html
    const vec3 ray_delta = abs(inv_ray_dir);
	const ivec3 ray_step = ivec3(sign(r.direction));

    vec3 hit_point = RayAt(r, global_t_value);

    // get position in grid space from global position
    const vec3 fposition = (hit_point - g_min) / g_scale;
    const vec3 intersection_delta = floor(fposition) - fposition;
    vec3 side_dist = fma(ray_step, intersection_delta, ray_step * 0.5 + 0.5) * ray_delta;

    // store max uint value to avoid false positive cache hit
    uint brick_type_index = ~0;
    uint brick_bits;

    const vec3 normal_axis = vec3(
        (ray_step.x < 0) ? 1 : -1,
        (ray_step.y < 0) ? 1 : -1,
        (ray_step.z < 0) ? 1 : -1
    );

    float t_value = 0;
    ivec3 local_position = ivec3(floor(fposition + 0.));

    while (
        all(greaterThanEqual(local_position, ivec3(0)))
        && all(lessThan(local_position, brick_dim))
        && global_t_value <= t_max
    ) {
        const uint grid_index = uint(local_position.x + brick_dim.x * (local_position.z + brick_dim.z * local_position.y));

        // 1 bit pr type, so we divide 32 bit int
        const uint new_brick_type_index = grid_index / 32;
        const int brick_type_offset = int(grid_index % 32);
        if (brick_type_index != new_brick_type_index) {
            brick_bits = brick_type_bits[new_brick_type_index];
            brick_type_index = new_brick_type_index;
        }

        const uint entry_type = brick_bits & (1 << brick_type_offset);
        if(entry_type != 0) { // TODO: actually check type
        // convert local position to the world space coordinate for the brick
            vec3 brick_min = fma(local_position, g_scale, g_min);
            global_t_value = t_value + grid_t_min + 0.01 * g_scale.x;

            hit.t = global_t_value;

            // check if ray hits any voxel in the brick
            const uint brick_index = brick_indices[grid_index];
            if (BrickHit(r, t_min, grid_t_max, ray_delta, ray_step, g_scale, brick_index, brick_min, hit)) {
                hit_min = brick_min;
                return true;
            }
        }

        // progress position with DDA
        if (side_dist.x < side_dist.y) {
            if (side_dist.x < side_dist.z) {
                t_value = side_dist.x * g_scale.x;
                side_dist.x += ray_delta.x;
                local_position.x += ray_step.x;
                hit.normal = vec3(normal_axis.x, 0, 0);
            }
            else {
                t_value = side_dist.z * g_scale.z;
                side_dist.z += ray_delta.z;
                local_position.z += ray_step.z;
                hit.normal = vec3(0, 0, normal_axis.z);
            }
        }
        else {
            if (side_dist.y < side_dist.z) {
                t_value = side_dist.y * g_scale.y;
                side_dist.y += ray_delta.y;
                local_position.y += ray_step.y;
                hit.normal = vec3(0, normal_axis.y, 0);
            }
            else {
                t_value = side_dist.z * g_scale.z;
                side_dist.z += ray_delta.z;
                local_position.z += ray_step.z;
                hit.normal = vec3(0, 0, normal_axis.z);
            }
        }
    }   

    return false;
}

bool BrickHit(
    Ray r,
    float t_min,
    float t_max,
    vec3 ray_delta,
    ivec3 ray_step,
    vec3 g_scale,
    uint brick_index,
    inout vec3 brick_position,
    inout HitRecord hit
) {
    const vec3 voxel_scale = g_scale * vec3(brick_voxel_scale);
    const uint solid_mask_base_index = brick_index * brick_bytes;

    /// get position in brick space from global position
    const vec3 fposition = (RayAt(r, hit.t) - brick_position) / voxel_scale;
    const vec3 intersection_delta = floor(fposition) - fposition;
    vec3 side_dist = fma(ray_step, intersection_delta, ray_step * 0.5 + 0.5) * ray_delta;

    const vec3 normal_axis = vec3(
        (ray_step.x < 0) ? 1 : -1,
        (ray_step.y < 0) ? 1 : -1,
        (ray_step.z < 0) ? 1 : -1
    );

    ivec3 local_position = ivec3(floor(fposition + 0.));
    float local_t_min = t_min - hit.t;
    float local_t_max = t_max - hit.t;
    float t_value = 0;
    while (
        all(greaterThanEqual(local_position, ivec3(0)))
        && all(lessThan(local_position, ivec3(brick_dimensions)))
        && t_value <= local_t_max
    ) {
        const int voxel_index = local_position.x + brick_dimensions * (local_position.z + brick_dimensions * local_position.y);
        const uint8_t mask_index = uint8_t(voxel_index / 8);
        const uint8_t mask_offset = uint8_t(voxel_index % 8);
        const uint8_t bitfield_final_entry = brick_solid_mask[solid_mask_base_index + mask_index];

        const bool hit_voxel = (bitfieldExtract(bitfield_final_entry, mask_offset, 1) != 0);
        if (hit_voxel) {
            bool ignore_brick = false;
            { // calculate material data
                // get the material index from brick 
                const uint brick_material_index = bitfieldExtract(brick_type_and_index[brick_index], 0, 31);

                // perform material lookup
                hit.index = material_indices[brick_material_index + voxel_index];
                // ignore brick if we are hitting the same brick type 
                ignore_brick = materials[hit.index].type == r.ignore_type_material && r.internal_reflection == materials[hit.index].type_data;
            }

            if (!ignore_brick) {
                const float t_offset = voxel_scale.x * 0.05;
                hit.t += t_value - t_offset;
                hit.point = RayAt(r, hit.t) + hit.normal * t_offset;
                brick_position = local_position * voxel_scale + brick_position;
                return true;
            }
        }

        // progress position with DDA
        if (side_dist.x < side_dist.y) {
            if (side_dist.x < side_dist.z) {
                t_value = side_dist.x * voxel_scale.x;
                side_dist.x += ray_delta.x;
                local_position.x += ray_step.x;
                hit.normal = vec3(normal_axis.x, 0, 0);
            }
            else {
                t_value = side_dist.z * voxel_scale.z;
                side_dist.z += ray_delta.z;
                local_position.z += ray_step.z;
                hit.normal = vec3(0, 0, normal_axis.z);
            }
        }
        else {
            if (side_dist.y < side_dist.z) {
                t_value = side_dist.y * voxel_scale.y;
                side_dist.y += ray_delta.y;
                local_position.y += ray_step.y;
                hit.normal = vec3(0, normal_axis.y, 0);
            }
            else {
                t_value = side_dist.z * voxel_scale.z;
                side_dist.z += ray_delta.z;
                local_position.z += ray_step.z;
                hit.normal = vec3(0, 0, normal_axis.z);
            }
        }
    }   

    return false;
}


Ray CameraGetRay(float u, float v) {
    const vec3 ray_dir = fma(push_constant.horizontal, vec3(u), push_constant.lower_left_corner) + fma(vec3(v), push_constant.vertical, -push_constant.origin);
    return CreateRay(push_constant.origin, ray_dir);
}


/*
// Source: http://jcgt.org/published/0007/03/04/ (defined as "slab")
/// Test if a ray intersect with min point p0 and max p1 of a slab
bool FastInstersect(vec3 p0, vec3 p1, Ray r) {
    const vec3 inv_ray_dir = 1 / r.direction;
    const vec3 t0 = (p0 - r.origin) * inv_ray_dir;
    const vec3 t1 = (p1 - r.origin) * inv_ray_dir;
    const vec3 tmin = min(t0, t1);
    const vec3 tmax = max(t0, t1);
    return maxComponent(tmin) <= maxComponent(tmax);
}
*/

float maxComponent(vec3 vec) {
    return max(max(vec.x, vec.y), vec.z);
}

float minComponent(vec3 vec) {
    return min(min(vec.x, vec.y), vec.z);
}

int indexOfMaxComponent(vec3 vec) {
    return int(vec.y > vec.x && vec.y > vec.z) + int(vec.z > vec.x && vec.z > vec.y) * 2;
}

// TODO: Source: (Ray tracing gems 2) / Peter Shirley
/// Test if a ray intersect with min point p0 and max p1 of a slab
/// This function will also computes the ray t_min and t_max and register a hit in a record in the event of an intersection
/// If calc_hit is false: only compute t values (t_min is still stored in hit.t)
bool AdvIntersect(vec3 box_min_point, vec3 box_max_point, Ray r, vec3 inv_ray_dir, inout float t_min, inout float t_max) {
    const vec3 t_lower = (box_min_point - r.origin) * inv_ray_dir;
    const vec3 t_upper = (box_max_point - r.origin) * inv_ray_dir;

    const vec3 t_mins = vec3(min(t_lower, t_upper));
    const vec3 t_maxes = vec3(max(t_lower, t_upper));

    t_min = max(t_min, maxComponent(t_mins));
    t_max = min(t_max, minComponent(t_maxes));
    return t_min <= t_max;
}

/// Test if a ray intersect with min point p0 and max p1 of a slab and calculate intersection normal
bool AdvNormIntersect(vec3 box_min_point, vec3 box_max_point, Ray r, vec3 inv_ray_dir, out vec3 normal, inout float t_min, inout float t_max) {
    const vec3 t_lower = (box_min_point - r.origin) * inv_ray_dir;
    const vec3 t_upper = (box_max_point - r.origin) * inv_ray_dir;

    const vec3 t_mins = vec3(min(t_lower, t_upper));
    const vec3 t_maxes = vec3(max(t_lower, t_upper));

    const int t_min_index = indexOfMaxComponent(t_mins);
    normal = vec3(0);
    normal[t_min_index] = sign(inv_ray_dir[t_min_index]);

    t_min = max(t_min, t_mins[t_min_index]);
    t_max = min(t_max, minComponent(t_maxes));
    return t_min <= t_max;
}


bool ScatterLambertian(Material material, Ray r_in, HitRecord hit, out Ray scattered) {
    // TODO: better random hemisphere
    vec3 scatter_dir = normalize(hit.normal + RandVec3(hit.point.xy + hit.point.z, -0.4, 0.4));
    scattered = CreateRay(hit.point, scatter_dir);
    return true;
}

bool ScatterMetal(Material material, Ray r_in, HitRecord hit, out Ray scattered) {
    vec3 reflected = reflect(r_in.direction, hit.normal);
    float fuzz = material.type_data;
    scattered = CreateRay(hit.point, reflected + RandVec3(hit.point.xy + hit.point.z, -fuzz, fuzz));
    return (dot(scattered.direction, hit.normal) > 0);
}

// Source: Ray tracing gems 2 page 107 (one of Bec's methods)
/// defined the refraction direction if a refraction is needed based on n1, n2 and the angle between
/// r_in and the normal
/// This means that refrac_dir only gets defined if function returns true
/// @param:
///     - n1: internal reflection of impact material
///     - n2: internal reflection of current material medium
///     - ray_dir: the traveling ray direction
///     - normal: normal vector of the impact surface
///     - refrac_dir: poternial calculated penetration vector of r_in
/// @return: bool that is true if refraction is calculated
bool transmissionDirection(float n1, float n2, vec3 ray_dir, vec3 normal, out vec3 refrac_dir) {
    const float eta = n1 / n2;
    const float c1 = -dot(ray_dir, normal);
    const float w = eta * c1;
    const float c2m = (w - eta) * (w + eta);
    if (c2m < -1.0) {
        return false;
    }
    refrac_dir = fma(vec3(eta), ray_dir, (w - sqrt(1.0 + c2m)) * normal);
    return true;
}

bool ScatterDielectric(Material material, Ray r_in, vec3 hit_c_min, HitRecord hit, out Ray scattered) {
    const float ir = material.type_data;

    // TODO: better noise (blue :))
    // TODO: add property to glass: roughness (0 should be no noise/rng)
    const vec3 normal = normalize(hit.normal + RandVec3(hit.point.xy + hit.point.z, -0.05, 0.05));
    vec3 direction;
    const bool should_refract = transmissionDirection(ir, r_in.internal_reflection, r_in.direction, normal, direction);
    if (should_refract && Rand(hit.point) > 0.5) {
        scattered = CreateRay(hit.point, direction);

        scattered.ignore_type_material = MAT_DIELECTRIC;
        // ray is traveling through non air medium
        scattered.internal_reflection = ir;
    } else {
        direction = reflect(r_in.direction, normal);
        scattered = CreateRay(hit.point, direction);
    }

    return true;
}

