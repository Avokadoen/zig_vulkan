#version 450

#extension GL_EXT_debug_printf : disable
// debugPrintfEXT("hello world %f", 1.0);

// This extension is strictly not required for vulkan 1.2 target, but is used to silence validator...
#extension GL_GOOGLE_include_directive : enable
#include "rand.comp"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;
layout(Rgba8, binding = 0) uniform writeonly image2D img_output;

#define MAX_BOUNCES 32
#define BIG_NUMBER 1e30
#define AMBIENT vec3(0.005)
#define PRECISION 0.000001
 
// Constants
const int MAT_LAMBERTIAN = 0;
const int MAT_METAL = 1;
const int MAT_DIELECTRIC = 2;

const uint IGNORE_MAT_LAMBERTIAN = MAT_LAMBERTIAN;
const uint IGNORE_MAT_METAL = MAT_METAL;
const uint IGNORE_MAT_DIELECTRIC = MAT_DIELECTRIC;
const uint IGNORE_MAT_NONE = 3;

// See glsl 4.40 spec chapter 4.7.1 for info on infinity
// https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.40.pdf
const float infinity = 0.001 / 0;
const float pi = 3.14159265358; // 3.1415926535897932385
const float faccuracy = 0.000001;

bool IsNearZero(vec3 v) {
    return (abs(v.x) < faccuracy) && (abs(v.y) < faccuracy) && (abs(v.z) < faccuracy);
}

struct Ray {
    vec3 origin;
    vec3 direction;
    float internal_reflection;
    // TODO: Bitmask instead of single ignore value.
    //       Refactor needed to make material types 1, 2, 3 instead of 0, 1, 2
    uint material_ignore;
};
Ray CreateRay(vec3 origin, vec3 direction);
vec3 RayAt(Ray r, float t);
vec3 RayColor(Ray r);

struct HitRecord {
    vec3 point;
    vec3 normal;
    float t;
    uint index; 
};

layout (push_constant) uniform PushConstants {
    // Camera
    uint image_width;
    uint image_height;
    vec3 horizontal;
    vec3 vertical;
    vec3 lower_left_corner;
    vec3 origin;
    float paddin;
    int samples_per_pixel;
    int max_bounce;

    // Sun
    vec3 sun_position;
    uint sun_enabled;
    vec3 sun_color; 
    float sun_radius;
} push_constant;
Ray CameraGetRay(float u, float v);


layout (binding = 1) uniform BrickGridState {
    // how many voxels in each axis
    uint voxel_dim_x;
    uint voxel_dim_y;
    uint voxel_dim_z;
    // how many bricks in each axis
    uint dim_x;
    uint dim_y;
    uint dim_z;
    // how many higher order entries in each axis
    uint higher_dim_x;
    uint higher_dim_y;
    uint higher_dim_z;

    uint padding1; // not in use
    uint padding2; // not in use
    uint padding3; // not in use

    // min point *and* base t value
    vec4 min_point_base_t;
    vec4 max_point_scale;
} brick_grid;

// material is represented by 32 bits:
struct Material {
    uint type;          // 2 left most bits
    uint type_index;   // 6 shifted 2 bits
    uint albedo_index; // 8 shifted 8 bits
};
layout (binding = 2) buffer MaterialBuffer {
    readonly int materials[];
};
bool ScatterLambertian(Material material, Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered);
bool ScatterMetal(Material material, Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered);
bool ScatterDielectric(Material material, Ray r_in, vec3 hit_c_min, HitRecord hit, out vec3 attenuation, out Ray scattered);


struct Albedo {
    vec4 color;
};
layout (binding = 3) buffer AlbedoBuffer {
    readonly Albedo albedos[];
};
vec3 AlbedoColor(Material mat);


struct Metal {
    float fuzz;
};
layout (binding = 4) buffer MetalBuffer {
    readonly Metal metal[];
};

struct Dielectric {
    // TODO: fuzz: IR: defined reflection/refraction ratio
    //             fuzz should define reflection/refraction ray spread
    float internal_reflection;
};
layout (binding = 5) buffer DielectricBuffer {
    readonly Dielectric dielectric[];
};

layout (binding = 6) buffer HigherGridBuffer {
    // one entry hold 4 entries
    readonly uint higher_grid_entries[];
};

layout (binding = 7) buffer GridBufferType {
    // each entry is 2 bits
    readonly uint brick_type_bits[];
};

layout (binding = 8) buffer GridBufferIndex {
    readonly uint brick_index[];
};

const uint VOXEL_START_INDEX = 0x0;
const uint BRICK_LOD_INDEX = 0x1;
struct Brick {
    // 512 bit voxel set mask
    uint solid_mask[16];
    // left-most bit is the index type (VOXEL_START_INDEX, or BRICK_LOD_INDEX) 
    uint type_and_index;
};
layout (binding = 9) buffer BrickBuffer {
    readonly Brick bricks[];
};

layout (binding = 10) buffer MaterialIndicesBuffer {
    // one entry hold 4 indices
    readonly uint material_indices[];
};

bool HigherGridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit);
bool GridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit);
bool BrickHit(Ray r, float t_min, float t_max, vec3 delta, Brick brick, inout vec3 brick_position, inout HitRecord hit);

// slab hit tests
bool FastInstersect(vec3 p0, vec3 p1, Ray r);
bool AdvIntersect(vec3 p0, vec3 p1, Ray r, vec3 inv_ray_dir, inout float t_min, inout float t_max);

// TODO: higher level grid optimization
// TODO: re-enable hack in ScatterDielectric
// TODO: test splitting scale and point & base t and point in brick grid
// TODO: normals are trivially calculated in DDA ...
// TODO: plane intersection test is faster than cube
// TODO: bug with refract vs reflect in diel
// TODO: store the current chunk index we stand in for further sampling and bounces!

void main() {
    const ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const ivec2 image_size = imageSize(img_output);
    if (pixel_coord.x >= image_size.x || pixel_coord.y >= image_size.y) {
        // don't ray trace discarded pixels
        return;
    }

    vec3 color = vec3(0.0, 0.0, 0.0);
    for (int sample_i = 0; sample_i < push_constant.samples_per_pixel; sample_i++) {  
        const float x = float(pixel_coord.x);
        const float y = float(pixel_coord.y);
        // TODO: proper random (blue noise)
        // TODO: remove division
        const float noise_x = hash12(vec2(x + sample_i, y) * 0.2 * float(sample_i > 0));
        const float u = (x + noise_x) / float(push_constant.image_width - 1);
        const float noise_y = hash12(vec2(x, y + sample_i) * 0.2 * float(sample_i > 0));
        const float v = (y + noise_y) / float(push_constant.image_height - 1);
        Ray ray = CameraGetRay(u, v);
        color += RayColor(ray);
    }

    // Divide the color by the number of samples and gamma-correct for gamma=2.0.
    color = sqrt(color / push_constant.samples_per_pixel);
    imageStore(img_output, pixel_coord, vec4(color, 1.0));
}

Ray CreateRay(vec3 origin, vec3 direction) {
    const float internal_reflection = 1.0;
    const uint material_ignore_mask = IGNORE_MAT_NONE;
    return Ray(origin, normalize(direction), internal_reflection, material_ignore_mask);
}

Ray CreateShadowRay(vec3 origin, vec3 direction) {
    const float internal_reflection = 1.0;
    const uint material_ignore_mask = (push_constant.sun_enabled > 0) ? IGNORE_MAT_NONE : IGNORE_MAT_DIELECTRIC;
    return Ray(origin, normalize(direction), internal_reflection, material_ignore_mask);
}

vec3 RayAt(Ray r, float t) {
    // instruction for: t * dir + origin
    return fma(vec3(t), r.direction, r.origin);
}

vec3 BackgroundColor(Ray r) {
    float t = 0.5 * (r.direction.y + 1.0);
    vec3 background_color = fma(vec3(1.0 - t), vec3(1.0), t * vec3(0.5, 0.7, 1.0));
    return background_color;
}

vec3 RayColor(Ray r) {
    const bool sun_enabled = push_constant.sun_enabled > 0;

    HitRecord hit;
    
    Ray current_ray = r;
    int loop_count = 0;
    
    vec3 shadow_c_min;
    HitRecord shadow_hit;
    Ray shadow_ray;

    vec3 emits[MAX_BOUNCES];
    vec3 attenuations[MAX_BOUNCES];
    vec3 hit_v_min;
    while (loop_count < push_constant.max_bounce && GridHit(current_ray, 0.00001, infinity, hit_v_min, hit)){         
        loop_count += 1;

        Ray scattered;
        vec3 attenuation;
        bool result = false;
        // The data is packed in 16 bits which is packed into a single int, so one int maps 2 materials
        // data sets. We shift the bits if we are a odd material index to get the material bits we want:
        const uint material_index = hit.index / 2;
        const uint material_bit_offset = 16 * (hit.index % 2);
        const uint material_bits = (materials[material_index] >> material_bit_offset);
        const Material material = Material(
            material_bits & 3,  // type
            bitfieldExtract(material_bits, 2, 6), // material index
            bitfieldExtract(material_bits, 8, 8) // albedo color
        );
        switch (material.type) {
            case MAT_LAMBERTIAN: 
                result = ScatterLambertian(material, current_ray, hit, attenuation, scattered);
                break;
            case MAT_METAL: 
                result = ScatterMetal(material, current_ray, hit, attenuation, scattered);
                break;
            case MAT_DIELECTRIC:
                result = ScatterDielectric(material, current_ray, hit_v_min, hit, attenuation, scattered);
                break;
            default: 
                loop_count -= 1;
                result = false;
                break;
        }
        if (sun_enabled) {
            const vec3 sun_sample_position = push_constant.sun_position + RandVec3(current_ray.direction.xy + current_ray.direction.z, -push_constant.sun_radius, push_constant.sun_radius);
            const vec3 shadow_ray_dir = (sun_sample_position - hit.point);
            const vec3 shadow_origin = hit.point;
            const Ray shadow_ray = CreateShadowRay(shadow_origin, shadow_ray_dir);

            // if lit by sun
            if (!GridHit(shadow_ray, 0.00001, infinity, hit_v_min, shadow_hit)) {
                emits[loop_count-1] = attenuation * push_constant.sun_color;
            } else {
                // cheat and apply some ambient :)
                emits[loop_count-1] = attenuation * AMBIENT;
            }
        }
        attenuations[loop_count-1] = attenuation;

        // if the material scatter function report that the ray failed to scatter
        if (!result) break;

        current_ray = scattered;
    }

    vec3 color = vec3(0);
    if (sun_enabled) {
        if (loop_count == 0) {
            color = BackgroundColor(current_ray) * push_constant.sun_color;
        } else {
            color = vec3(0);
            for (int i = loop_count - 1; i >= 0; i--) {
                color = (color * attenuations[i]) + emits[i];
            }
        }
    } else {
        if (loop_count == 0) {
            return BackgroundColor(current_ray);
        } else {
            color = vec3(1);
            for (int i = loop_count - 1; i >= 0; i--) {
                color *= attenuations[i];
            }
        }
    }
    return color;
}

/*
bool HigherGridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit) {
    // min point *and* base t value
    const vec3 g_min = brick_grid.min_point_base_t.xyz;
    const vec3 g_max = brick_grid.max_point_scale.xyz - vec3(0.001);
    const float b_base_t = brick_grid.min_point_base_t.w;
   
    float t_grid_max = t_max;
    HitRecord hit_grid;
    if (!AdvIntersect(g_min, g_max, r, t_min, t_grid_max, hit_grid)) {
        return false;
    }
    
    // HACK: workaround for precision issues with t being too low for "penetrating" grid 
    hit_grid.t += 0.001;

    // Perform 3DDDA, source: https://lodev.org/cgtutor/raycasting.html
    
    /// get position in higher grid space from global position
    const vec3 fposition = (RayAt(r, hit_grid.t) - g_min) * 0.25;
    ivec3 position = ivec3(fposition);

    // in the event of a axis of direction is 0 we get infinity according to 
    // float specification IEEE 754 (division by 0 is defined as resulting in infinity value)
    const vec3 delta = abs(1.0 / r.direction);

    ivec3 pos_step;
    vec3 axis_t;
    axis_t.x = defineAxis(r.direction.x, fposition.x, position.x, delta.x, pos_step.x);
    axis_t.y = defineAxis(r.direction.y, fposition.y, position.y, delta.y, pos_step.y);
    axis_t.z = defineAxis(r.direction.z, fposition.z, position.z, delta.z, pos_step.z);

    // DDA loop
    float t_value = 0;
    while (true) { 
        uint index = position.x + brick_grid.higher_dim_x * (position.z + brick_grid.higher_dim_z * position.y);
        uint entry = higher_grid_entries[uint(index / 4)];
        int value_offset = int(index) % 4 * 8;
        uint entry_value = bitfieldExtract(entry, value_offset, 8); 
        if(entry_value > 0) {
            if(GridHit(r, t_min, t_max, hit_min, hit)) {
                return true;
            }   
        }

        // progress position with DDA
        if (axis_t.x < axis_t.y) {
            if (axis_t.x < axis_t.z) {
                t_value = axis_t.x;
                position.x += pos_step.x;
                if (position.x < 0 || position.x >= brick_grid.higher_dim_x) {
                    break;
                }
                axis_t.x += delta.x;
            } else {
                t_value = axis_t.z;
                position.z += pos_step.z;
                if (position.z < 0 || position.z >= brick_grid.higher_dim_z) {
                    break;
                }
                axis_t.z += delta.z;
            }
        } else {
            if (axis_t.y < axis_t.z) {
                t_value = axis_t.y;
                position.y += pos_step.y;
                if (position.y < 0 || position.y >= brick_grid.higher_dim_y) {
                    break;
                }
                axis_t.y += delta.y;
            } else {
                t_value = axis_t.z;
                position.z += pos_step.z;
                if (position.z < 0 || position.z >= brick_grid.higher_dim_z) {
                    break;
                }
                axis_t.z += delta.z;
            }
        }
    }   

    return false;
}
*/

/// Traverses the brick grid and calculates any potential hit with the grid
bool GridHit(Ray r, float t_min, float t_max, out vec3 hit_min, out HitRecord hit) {
    const vec3 g_min = brick_grid.min_point_base_t.xyz;
    const float b_base_t = brick_grid.min_point_base_t.w;
    const vec3 g_max = brick_grid.max_point_scale.xyz;
    const float g_scale = brick_grid.max_point_scale.w;
    const ivec3 brick_dim = ivec3(brick_grid.dim_x, brick_grid.dim_y, brick_grid.dim_z);

    const vec3 inv_ray_dir = vec3(
        (r.direction.x < -PRECISION || r.direction.x > PRECISION) ? 1.0 / r.direction.x : BIG_NUMBER,
        (r.direction.y < -PRECISION || r.direction.y > PRECISION) ? 1.0 / r.direction.y : BIG_NUMBER,
        (r.direction.z < -PRECISION || r.direction.z > PRECISION) ? 1.0 / r.direction.z : BIG_NUMBER
    );

    float t_grid_min = t_min;
    float t_grid_max = t_max;
    if (!AdvIntersect(g_min, g_max, r, inv_ray_dir, t_grid_min, t_grid_max)) {
        return false;
    }
    // HACK: workaround for precision issues with t being too low for "penetrating" grid 
    t_grid_min += 0.001;

    // Perform 3DDDA, source: https://lodev.org/cgtutor/raycasting.html
    
    /// get position in grid space from global position
    const vec3 fposition = RayAt(r, t_grid_min) - g_min; 
    ivec3 position = ivec3(floor(fposition));

    // in the event of a axis of direction is 0 we get infinity according to 
    // float specification IEEE 754 (division by 0 is defined as resulting in infinity value)
    const vec3 delta = abs(inv_ray_dir);

    const bvec3 less_than = bvec3(
        r.direction.x < 0,
        r.direction.y < 0,
        r.direction.z < 0        
    );
    const ivec3 pos_step = ivec3(1) + ivec3(less_than) * ivec3(-2);
    vec3 axis_a = fma(fposition, vec3(less_than), (vec3(position) + vec3(1)) * vec3(not(less_than)));
    vec3 axis_b = fma(vec3(position), vec3(less_than), fposition * vec3(not(less_than)));
    vec3 axis_t = (axis_a - axis_b) * delta;

    // DDA loop
    ivec3 axis = ivec3(0);
    uint brick_bits;
    // store max uint value to avoid false positive cache hit
    uint brick_type_index = ~0;
    while (true) { 
        const uint grid_index = position.x + brick_dim.x * (position.z + brick_dim.z * position.y);
        // 1 bit pr type, so we divide 32 bit int
        const uint new_brick_type_index = grid_index / 32;
        const int brick_type_offset = int(grid_index % 32);
        if (brick_type_index != new_brick_type_index) {
            brick_bits = brick_type_bits[new_brick_type_index];
            brick_type_index = new_brick_type_index;
        }
        // HACK: don't extract the bit, just isolate it and see if it is 1 (value is not 0)
        const uint entry_type = brick_bits & (1 << brick_type_offset);
        if(entry_type != 0) { // TODO: actually check type
            vec3 brick_min = g_min + position;
            const vec3 t_value = (axis_t - delta) * vec3(axis);
            hit.t = fma(t_value.x + t_value.y + t_value.z, brick_grid.max_point_scale.w, t_grid_min);

            // check if ray hits any voxel in the brick
            const uint brick_index = brick_index[grid_index];
            if (BrickHit(r, t_min, t_grid_max, delta, bricks[brick_index], brick_min, hit)) {
                hit_min = brick_min;
                return true;
            }
        }

        const bool axis_x = (axis_t.x < axis_t.y) && (axis_t.x < axis_t.z);
        const bool axis_y = (axis_t.x >= axis_t.y) && (axis_t.y < axis_t.z);
        axis = ivec3(axis_x, axis_y, !axis_x && !axis_y);
        // progress position with DDA
        position += pos_step * axis;
        const ivec3 position_delta_axis = position * axis; 
        const int position_delta = position_delta_axis.x + position_delta_axis.y + position_delta_axis.z;
        const ivec3 dim_axis = brick_dim * axis;
        const int dim_limit = dim_axis.x + dim_axis.y + dim_axis.z;
        if (position_delta < 0 || position_delta >= dim_limit) {
            break;
        }
        axis_t += delta * vec3(axis);
    }   

    return false;
}

bool BrickHit(Ray r, float t_min, float t_max, vec3 delta, Brick brick, inout vec3 brick_position, inout HitRecord hit) {
    // Perform 3DDDA, source: https://lodev.org/cgtutor/raycasting.html
    /// get position in brick space from global position
    /// caller should make sure that p is in fact inside the grid
    const vec3 fposition = (RayAt(r, hit.t + 0.0001) - brick_position) * 8;
    ivec3 position = ivec3(floor(fposition));

    // optimization: copy solid mask from SSBO to localize the mask memory
    const uint solid_mask[16] = brick.solid_mask;

    const bvec3 less_than = bvec3(
        r.direction.x < 0,
        r.direction.y < 0,
        r.direction.z < 0        
    );
    const ivec3 pos_step = ivec3(1) + ivec3(less_than) * ivec3(-2);
    vec3 axis_a = fma(fposition, vec3(less_than), (vec3(position) + vec3(1)) * vec3(not(less_than)));
    vec3 axis_b = fma(vec3(position), vec3(less_than), fposition * vec3(not(less_than)));
    vec3 axis_t = (axis_a - axis_b) * delta;
    // DDA loop
    // TODO:  && t_value <= t_max
    vec3 axis = vec3(0);
    while (true) { 
        const int bit_offset = position.x + 8 * (position.z + 8 * position.y);
        const int mask_index = bit_offset / 32;
        const int mask_offset = bit_offset % 32;
        const uint uint_mask = solid_mask[mask_index];
        const uint bitfield_final_entry = bitfieldExtract(uint_mask, 0, mask_offset + 1);
        // TODO: if t_value >= t_min
        if ((bitfield_final_entry & (1 << mask_offset)) != 0) {
            bool ignore_brick = false;
            { // calculate material data
                int bits_before = 0;
                // find and assign material index
                for (int i = 0; i < mask_index; i++) {
                    bits_before += bitCount(solid_mask[i]);
                }

                const int bit_pad = 32 - mask_offset;
                // remove bit that is current voxel (& ~(1 << mask_offset))
                // shift any rogue bits to the left in order to remove them
                // shift all bits to the right to reset
                bits_before += bitCount(bitfield_final_entry & ~(1 << mask_offset));

                const int material_index_index = (bits_before * 8) / 32;
                const int material_index_bit_offset = (bits_before * 8) % 32;
                
                // get the material index from brick 
                const uint brick_material_index = (brick.type_and_index << 1) >> 1;

                // perform material lookup
                hit.index = bitfieldExtract(material_indices[material_index_index + brick_material_index], material_index_bit_offset, 8);
                const int material_bits = materials[hit.index];
                ignore_brick = (material_bits & 3) == r.material_ignore;
            }

            if (!ignore_brick) {
                const float scale = brick_grid.max_point_scale.w * 0.125;
                const vec3 t_value = (axis_t - delta) * vec3(axis);
                hit.t = fma(t_value.x + t_value.y + t_value.z, scale, hit.t);
                hit.point = RayAt(r, hit.t);

                { // normal calculation
                    brick_position += (position * scale);
                    const vec3 center = brick_position + vec3(scale * 0.5); // 0.125 / 2
                    vec3 normal = hit.point - center;
                    const vec3 abs_normal = abs(normal);
                    normal.x = sign(normal.x) * float(abs_normal.x >= abs_normal.y && abs_normal.x >= abs_normal.z);
                    normal.y = sign(normal.y) * float(abs_normal.y >= abs_normal.x && abs_normal.y >= abs_normal.z);
                    normal.z = sign(normal.z) * float(abs_normal.z >= abs_normal.x && abs_normal.z >= abs_normal.y);
                    hit.normal = normalize(normal);
                }
                return true;
            }
        }

        const bool axis_x = (axis_t.x < axis_t.y) && (axis_t.x < axis_t.z);
        const bool axis_y = (axis_t.x >= axis_t.y) && (axis_t.y < axis_t.z);
        axis = vec3(axis_x, axis_y, !axis_x && !axis_y);
        // progress position with DDA
        position += pos_step * ivec3(axis);
        const vec3 position_delta_axis = position * axis; 
        const float position_delta = position_delta_axis.x + position_delta_axis.y + position_delta_axis.z;
        if (position_delta < 0 || position_delta >= 8) {
            break;
        }
        axis_t += delta * axis;
    }   

    return false;
}


Ray CameraGetRay(float u, float v) {
    const vec3 ray_dir = fma(push_constant.horizontal, vec3(u), push_constant.lower_left_corner) + fma(vec3(v), push_constant.vertical, -push_constant.origin);
    return CreateRay(push_constant.origin, ray_dir);
}

vec3 AlbedoColor(Material material) {
    return albedos[material.albedo_index].color.xyz;
}

/*
float maxComponent(vec3 v) {
  return max(max(v.x, v.y), v.z);
}
// Source: http://jcgt.org/published/0007/03/04/ (defined as "slab")
/// Test if a ray intersect with min point p0 and max p1 of a slab
bool FastInstersect(vec3 p0, vec3 p1, Ray r) {
    const vec3 inv_ray_dir = 1 / r.direction;
    const vec3 t0 = (p0 - r.origin) * inv_ray_dir;
    const vec3 t1 = (p1 - r.origin) * inv_ray_dir;
    const vec3 tmin = min(t0, t1);
    const vec3 tmax = max(t0, t1);
    return maxComponent(tmin) <= maxComponent(tmax);
}
*/

// TODO: Source: (Ray tracing gems 2) / Peter Shirley
/// Test if a ray intersect with min point p0 and max p1 of a slab
/// This function will also computes the ray t_min and t_max and register a hit in a record in the event of an intersection
/// If calc_hit is false: only compute t values (t_min is still stored in hit.t)
bool AdvIntersect(vec3 box_min_point, vec3 box_max_point, Ray r, vec3 inv_ray_dir, inout float t_min, inout float t_max) {
    const vec3 t_lower = (box_min_point - r.origin) * inv_ray_dir;
    const vec3 t_upper = (box_max_point - r.origin) * inv_ray_dir;

    const vec3 t_mins = vec3(min(t_lower, t_upper));
    const vec3 t_maxes = vec3(max(t_lower, t_upper));

    float t_cube_min = t_min;
    float t_cube_max = t_max;
    t_cube_min = max(t_cube_min, t_mins.x);
    t_cube_min = max(t_cube_min, t_mins.y);
    t_cube_min = max(t_cube_min, t_mins.z);
    t_cube_max = min(t_cube_max, t_maxes.x);
    t_cube_max = min(t_cube_max, t_maxes.y);
    t_cube_max = min(t_cube_max, t_maxes.z);

    // store the t values
    t_min = t_cube_min; 
    t_max = t_cube_max;

    return t_cube_min <= t_cube_max;
}


bool ScatterLambertian(Material material, Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    // TODO: better random hemisphere
    vec3 scatter_dir = normalize(hit.normal + RandVec3(hit.point.xy + hit.point.z, -0.4, 0.4));
    scattered = CreateRay(hit.point, scatter_dir);

    attenuation = AlbedoColor(material);
    return true;
}

bool ScatterMetal(Material material, Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    vec3 reflected = reflect(r_in.direction, hit.normal);
    float fuzz = metal[material.type_index].fuzz;
    scattered = CreateRay(hit.point, reflected + RandVec3(hit.point.xy + hit.point.z, -fuzz, fuzz));
    attenuation = AlbedoColor(material);
    return (dot(scattered.direction, hit.normal) > 0);
}

// Source: Ray tracing gems 2 page 107 (one of Bec's methods)
/// defined the refraction direction if a refraction is needed based on n1, n2 and the angle between
/// r_in and the normal
/// This means that refrac_dir only gets defined if function returns true
/// @param:
///     - n1: internal reflection of impact material
///     - n2: internal reflection of current material medium
///     - ray_dir: the traveling ray direction
///     - normal: normal vector of the impact surface
///     - refrac_dir: poternial calculated penetration vector of r_in
/// @return: bool that is true if refraction is calculated
bool transmissionDirection(float n1, float n2, vec3 ray_dir, vec3 normal, out vec3 refrac_dir) {
    const float eta = n1 / n2;
    const float c1 = -dot(ray_dir, normal);
    const float w = eta * c1;
    const float c2m = (w - eta) * (w + eta);
    if (c2m < -1.0) {
        return false;
    }
    refrac_dir = fma(vec3(eta), ray_dir, (w - sqrt(1.0 + c2m)) * normal);
    return true;
}

bool ScatterDielectric(Material material, Ray r_in, vec3 hit_c_min, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    attenuation = AlbedoColor(material);

    const float ir = dielectric[material.type_index].internal_reflection;

    // TODO: better noise (blue :))
    // TODO: add property to glass: roughness (0 should be no noise/rng)
    const vec3 normal = normalize(hit.normal + RandVec3(hit.point.xy + hit.point.z, -0.05, 0.05));
    vec3 direction;
    const bool should_refract = transmissionDirection(ir, r_in.internal_reflection, r_in.direction, normal, direction);
    if (should_refract && Rand(hit.point) > 0.5) {
        scattered = CreateRay(hit.point, direction);
        // TODO: we can remove this if we find the correct t_min for GridHit in calculate raycolor
        // HACK: move scattered ray out of current cube explicitly
        {
            float t_max = 9999.0;
            hit.t = 0;
            const vec3 inv_ray_dir = 1 / r_in.direction;
            AdvIntersect(hit_c_min - vec3(0.001), hit_c_min + vec3(0.126), scattered, inv_ray_dir, hit.t, t_max);
            scattered = CreateRay(RayAt(scattered, t_max), scattered.direction);
        }
        // ray is traveling through non air medium
        scattered.internal_reflection = ir;
    } else {
        direction = reflect(r_in.direction, normal);
        scattered = CreateRay(hit.point, direction);
    }

    return true;
}

