#version 450

// Shader from: https://github.com/Avokadoen/tdt4230_project_raytracing

layout(local_size_x = 32, local_size_y = 32) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

// Constants
// See glsl 4.40 spec chapter 4.7.1 for info on infinity
// https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.40.pdf
const int MAT_LAMBERTIAN = 0;
const int MAT_METAL = 1;
const int MAT_DIELECTRIC = 2;

const float infinity = 0.001 / 0;
const float pi = 3.14159265358; // 3.1415926535897932385

bool IsNearZero(vec3 v) {
    const float s = 0.000001;
    return (abs(v.x) < s) && (abs(v.y) < s) && (abs(v.z) < s);
}

// TODO: fma
// Source: http://jcgt.org/published/0007/04/01/
// Input inv_view_dir: inverse view direction
// Input alpha: roughness parameter
// Input U: uniform random numbers
// Output Ne: normal sampled with PDF D_Ve(Ne) = G1(Ve) * max(0, dot(Ve, Ne)) * D(Ne) / Ve.z
vec3 SampleGGXVNDF(vec3 inv_view_dir, vec2 alpha, vec2 U) {
    // transforming the view direction to the hemisphere configuration
    vec3 Vh = normalize(vec3(alpha.x * inv_view_dir.x, alpha.y * inv_view_dir.y, inv_view_dir.z));
    
    // orthonormal basis (with special case if cross product is zero)
    float lensq = fma(Vh.x, Vh.x, Vh.y * Vh.y);
    vec3 T1 = lensq > 0 ? vec3(-Vh.y, Vh.x, 0) * inversesqrt(lensq) : vec3(1, 0, 0);
    vec3 T2 = cross(Vh, T1);

    // parameterization of the projected area
    float r = sqrt(U.x);
    float phi = 2.0 * pi * U.y;
    float t1 = r * cos(phi);
    float t2 = r * sin(phi);
    float s = 0.5 * (1.0 + Vh.z);
    t2 = fma((1.0 - s), sqrt(1.0 - t1 * t1), s * t2);
    
    // reprojection onto hemisphere
    vec3 Nh = fma(vec3(t1), T1, fma(vec3(t2), T2, sqrt(max(0.0, 1.0 - t1 * t1 - t2 * t2)) * Vh));
    
    // transforming the normal back to the ellipsoid configuration
    return normalize(vec3(alpha.x * Nh.x, alpha.y * Nh.y, max(0.0, Nh.z)));
}


float Rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }
float Rand(vec2 co){ return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453); }
float Rand(vec3 co){ return Rand(co.xy+Rand(co.z)); }
float Rand(vec2 co, float min, float max) {
    return min + (max - min) * Rand(co);
}
vec3 RandVec3(vec2 co) {
    float x = Rand(co);
    float y = Rand(vec2(co.x + x, co.y + x));
    float z = Rand(vec2(co.x + y, co.y + y));
    return vec3(x, y, z);
}
vec3 RandVec3(vec2 co, float min, float max) {
    float x = Rand(co, min, max);
    float y = Rand(vec2(co.x + x, co.y + x), min, max);
    float z = Rand(vec2(co.x + y, co.y + y), min, max);
    return vec3(x, y, z);
}
// Source: https://www.shadertoy.com/view/4djSRW
float hash12(vec2 p) {
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}
float hash12(vec2 p, float min, float max) {
    return fma(hash12(p), (max - min), min) ;
}
float hash13(vec3 p3)
{
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}
vec2 hash23(vec3 p3)
{
	p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}
vec3 hash32(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz + 33.33);
    return fract((p3.xxy + p3.yzz) * p3.zyx);
}
vec3 hash32(vec2 p, float min, float max) {
    vec3 rng = hash32(p);
    float min_max_diff = max - min;
    return vec3(
        fma(rng.x, min_max_diff, min), 
        fma(rng.y, min_max_diff, min), 
        fma(rng.z, min_max_diff, min)
    );
}
vec3 RandInHemisphere(vec2 co, vec3 normal) {
    vec3 in_unit_sphere = RandVec3(co, -1, 1);
    while (dot(in_unit_sphere, in_unit_sphere) >= 1) {
        in_unit_sphere = RandVec3(co, -1, 1);
    }
    if (dot(in_unit_sphere, normal) > 0.0) // In the same hemisphere as the normal
        return in_unit_sphere;
    else
        return -in_unit_sphere;
}

struct Ray {
    vec3 origin;
    vec3 direction;
};
Ray CreateRay(vec3 origin, vec3 direction);
vec3 RayAt(Ray r, float t);
vec3 RayColor(Ray r);

struct HitRecord {
    vec3 point;
    vec3 normal;
    float t;
    uint index; 
    bool front_face;
};

struct Camera {
    int image_width;
    int image_height;

    vec3 horizontal;
    vec3 vertical;

    vec3 lower_left_corner;
    vec3 origin;

    int samples_per_pixel;
    int max_bounce;
};
uniform Camera camera;
Ray CameraGetRay(Camera camera, float u, float v);


struct OctreeFloats {
    vec4 min_point;
    float scale;
    float inv_scale;
    float inv_cell_count;
};
layout (shared, binding = 6) buffer OctreeFloatsBuffer {
    OctreeFloats octree_floats[];
};
struct OctreeInts {
    int max_depth;
    int max_iter;
    int cell_count;
};
layout (shared, binding = 7) buffer OctreeIntsBuffer {
    OctreeInts octree_ints[];
};

// Octree cell type
const int EMPTY = 0;
const int PARENT = 1; 
const int LEAF = 2;
struct Node {
    // EMPTY    = not used,
    // PARENT   = index to indirect cell
    // LEAF     = index to material
    uint value;
    uint type; 
};
// Read about std here: https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)#Memory_layout
layout (shared, binding = 0) buffer IndirectCellBuffer {
    readonly Node indirect_cells[];
};
// Octree methods
Node AccessIndirectCell(ivec3 i) { return indirect_cells[i.z + 2 * (i.y + 2 * i.x)]; }
bool OctreeHit(Ray r, float t_min, float t_max, out HitRecord hit);
bool CubeHit(vec3 cmin, float size, Ray r, float t_min, inout float t_max, out HitRecord hit, out float dot_p);


struct Material {
    int type;
    int attribute_index;
    int albedo_index;
};
layout (std430, binding = 1) buffer MaterialBuffer {
    readonly Material materials[];
};
bool ScatterLambertian(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered);
bool ScatterMetal(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered);
bool ScatterDielectric(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered);


// std430 vec3 requires padding if no other variable present ..
struct Albedo {
    float x;
    float y;
    float z;
};
layout (std430, binding = 2) buffer AlbedoBuffer {
    readonly Albedo albedos[];
};
vec3 AlbedoColor(uint index);


struct Metal {
    float fuzz;
};
layout (std430, binding = 3) buffer MetalBuffer {
    readonly Metal metal[];
};


struct Dielectric {
    float ir;
};
layout (std430, binding = 4) buffer DielectricBuffer {
    readonly Dielectric dielectric[];
};

int sample_i = 0;
vec3 RngSample(vec3 point) {
    return fma(point, vec3(100), vec3(sample_i * 6));
}

void main() {
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec3 color = vec3(0.0, 0.0, 0.0);
    for (int sample_i = 0; sample_i < camera.samples_per_pixel; sample_i++) {
        
        float x = float(pixel_coord.x);
        float y = float(pixel_coord.y);
        // TODO: remove division
        float u = (x + hash12(vec2(x + sample_i, y) * 0.2)) / float(camera.image_width - 1);
        float v = (y + hash12(vec2(x, y + sample_i) * 0.2)) / float(camera.image_height - 1);
        Ray ray = CameraGetRay(camera, u, v);
        color += RayColor(ray);
    }

    color = sqrt(color / camera.samples_per_pixel);
    color = clamp(color, 0, 1);
    imageStore(img_output, pixel_coord, vec4(color, 1.0));
}

Ray CreateRay(vec3 origin, vec3 direction) {
    return Ray(origin, normalize(direction));
}

vec3 RayAt(Ray r, float t) {
    // instruction for: t * dir + origin
    return fma(vec3(t), r.direction, r.origin);
}

// TODO: This function has way too much branching for glsl ...
vec3 RayColor(Ray r) {
    HitRecord hit;
    Ray current_ray = r;
    vec3 accumulative_attenuation = vec3(1.0);
    int loop_count = 0;

    // TODO: min should be based on max_depth here  
    while (loop_count < camera.max_bounce && OctreeHit(current_ray, 0.0003, infinity, hit)){ 
        loop_count += 1;

        Ray scattered;
        vec3 attenuation;

        bool result = false;
        switch (materials[hit.index].type) {
        case MAT_LAMBERTIAN: 
            result = ScatterLambertian(current_ray, hit, attenuation, scattered);
            break;
        case MAT_METAL: 
            result = ScatterMetal(current_ray, hit, attenuation, scattered);
            break;
        case MAT_DIELECTRIC:
            result = ScatterDielectric(current_ray, hit, attenuation, scattered);
            break;
        default: 
            result = false;
            break;
        }
        if (!result) break;
        
        accumulative_attenuation *= attenuation;
        current_ray = scattered;
    }
    if (loop_count > 0) return accumulative_attenuation;

    float t = 0.5 * (current_ray.direction.y + 1.0);
    vec3 background_color = fma(vec3(1.0 - t), vec3(1.0), t * vec3(0.5, 0.7, 1.0));
    return background_color;
}

Ray CameraGetRay(Camera camera, float u, float v) {
    vec3 ray_dir = fma(camera.horizontal, vec3(u), camera.lower_left_corner) + fma(vec3(v), camera.vertical, -camera.origin);
    return CreateRay(camera.origin, ray_dir);
}

vec3 AlbedoColor(uint index) {
    Material mat = materials[index];
    Albedo a = albedos[mat.albedo_index];
    return vec3(a.x, a.y, a.z);
}

// TODO: Source: (Ray tracing gems 2) / Peter Shirley / http://jcgt.org/published/0007/03/04/
bool CubeHit(vec3 cmin, float size, Ray r, float t_min, inout float t_max, out HitRecord hit, out float dot_p) {
    vec3 cmax = cmin + vec3(size);

    vec3 inv_ray_dir = 1 / r.direction;
    vec3 t_lower = (cmin - r.origin) * inv_ray_dir;
    vec3 t_upper = (cmax - r.origin) * inv_ray_dir;

    vec3 t_mins = vec3(min(t_lower, t_upper));
    vec3 t_maxes = vec3(max(t_lower, t_upper));

    float t_cube_min = t_min;
    float t_cube_max = t_max;
    for (int i = 0; i < 3; i++) {
        t_cube_min = max(t_cube_min, t_mins[i]);
        t_cube_max = min(t_cube_max, t_maxes[i]);
    }
    if (t_cube_min > t_cube_max) {
        return false;
    }

    // store the exit t in t_max
    t_max = t_cube_max;
    hit.t = t_cube_min;
    hit.point = RayAt(r, hit.t);
    
    float radius = size * 0.5;
    vec3 center = cmin + vec3(radius);
    
    vec3 normal = hit.point - center;
    vec3 abs_norm = abs(normal);
    float keep_x = float(abs_norm.x >= abs_norm.y && abs_norm.x >= abs_norm.z);
    float keep_y = float(abs_norm.y > abs_norm.x && abs_norm.y > abs_norm.z);
    float keep_z = float(abs_norm.z > abs_norm.x && abs_norm.z > abs_norm.y); 
    normal = normalize(vec3(normal.x * keep_x, normal.y * keep_y, normal.z * keep_z));
    dot_p = dot(r.direction, normal);
    hit.front_face = dot_p < 0; 
    hit.normal = normalize(normal * fma(-2, int(!hit.front_face), 1));

    return true;
}

// Does a lookup in the octree and returns current Node
// Should only be use in OctreeHit
bool treeLookup(
    vec3 voxel_coord,           // point we are doing lookup with in image coordinates
    out float inv_pow_depth,    // depth of current lookup node
    out vec3 grid_uv,           // uv coordinates of node in grid
    out Node node
) {
    vec3 indirect_cell_dim = vec3(octree_ints[0].cell_count * 2, 2, 2);
    vec3 depth_coords = voxel_coord;
    
    node = Node(0, 0);
    inv_pow_depth = 1;
    grid_uv = vec3(0);
   
    for (float i = 0; i < octree_ints[0].max_depth; i++) {
        inv_pow_depth = inv_pow_depth * 0.5;
        vec3 point_uv = fract(depth_coords);
        point_uv.x = (node.value + point_uv.x) * octree_floats[0].inv_cell_count;
        ivec3 point = ivec3(round(fma(point_uv, vec3(octree_ints[0].cell_count * 2, 2, 2), vec3(-0.5))));

        vec3 added_uv = (mod(point, 2) * inv_pow_depth);
        grid_uv += added_uv;

        node = AccessIndirectCell(point);
        
        // if node is not a parent
        bool is_empty = node.type == EMPTY;
        bool is_leaf = node.type == LEAF;
        if (is_empty || is_leaf) { 
            // Nothing more to lookup
            return is_leaf;
        } 

        depth_coords = depth_coords * 2;
    }
    return false;
}

// Traverse octree and check for hits in leaf nodes
bool OctreeHit(Ray r, float t_min, float t_max, out HitRecord hit) {
    const float base_t_advance = 0.0001;
    vec3 c_min = octree_floats[0].min_point.xyz;
    float c_scale = octree_floats[0].scale;
    HitRecord c_hit;
    float dot_p;
    float inv_pow_depth = 0.5;

    // record t size of octree relative to ray
    float t_octree_max = t_max;
    bool cube_hit = CubeHit(c_min, c_scale, r, t_min, t_octree_max, c_hit, dot_p);
    float t_stride = c_hit.t;
    
    for (int i = 0; i < octree_ints[0].max_iter && t_stride < t_octree_max; i++) { 
        // TODO: something that makes sense here:
        float min_t_advance = max(base_t_advance * (inv_pow_depth + 0.1), 0.000001);  // * (1 - dot_p + 0.1)
        vec3 world_point = RayAt(r, t_stride + min_t_advance);
        vec3 lookup_point = (world_point - octree_floats[0].min_point.xyz) * octree_floats[0].inv_scale;
        // TODO: This hack checks explicitly if lookup is not in octree, this should
        //       be handled through other means ...
        if (fract(lookup_point) - lookup_point != vec3(0.0)) { 
            return false;
        }

        vec3 grid_uv;
        Node node;
        if (treeLookup(lookup_point, inv_pow_depth, grid_uv, node)) {
            // TODO: code should be restructured to not need this branch as it is the 
            //       same code as some code further down
            if (i > 0) {
                c_min = fma(grid_uv, vec3(octree_floats[0].scale), octree_floats[0].min_point.xyz);
                c_scale = octree_floats[0].scale * inv_pow_depth;  
                
                t_min = t_stride;
                t_stride = t_octree_max;
                cube_hit = CubeHit(c_min, c_scale, r, t_min, t_stride, c_hit, dot_p);
            }

            hit = c_hit;
            hit.index = node.value;
            return true;
        }

        // TODO: precision correction based on depth
        c_min = fma(grid_uv, vec3(octree_floats[0].scale), octree_floats[0].min_point.xyz) - 0.00001;
        c_scale = octree_floats[0].scale * inv_pow_depth + 0.00002;  
        
        t_min = t_stride;
        t_stride = t_octree_max;
        cube_hit = CubeHit(c_min, c_scale, r, t_min, t_stride, c_hit, dot_p);
    }
    
    return false;
}

// source: https://backend.orbit.dtu.dk/ws/portalfiles/portal/126824972/onb_frisvad_jgt2012_v2.pdf
mat3 constructFrisvad(vec3 normal) {
    mat3 ret;
    ret[1] = normalize(normal); // TODO: normalize here is strictly not required and simply waste computation
    // Handle the singularity
    if(normal.z < -0.9999) {
        ret[0] = vec3(0.0, -1.0, 0.0);
        ret[2] = vec3(-1.0, 0.0, 0.0);
    } else {
        float a = 1.0 / (1.0 + normal.z);
        float b = -normal.x * normal.y * a;
        ret[0] = vec3(1.0 - normal.x * normal.x * a, b, -normal.x);
        ret[2] = vec3(b, 1.0 - normal.y * normal.y * a, -normal.y);
    }

    return ret;
}

bool ScatterLambertian(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    mat3 norm_perp = constructFrisvad(hit.normal);
    vec3 norm_space_view = vec3(dot(r_in.direction, norm_perp[0]), dot(r_in.direction, norm_perp[1]), dot(r_in.direction, norm_perp[2]));
    vec3 scatter_sample = SampleGGXVNDF(-norm_space_view, vec2(0.85, 0.85), hash23(RngSample(hit.point)));
    vec3 scatter_dir = reflect(r_in.direction, scatter_sample);
    scattered = CreateRay(hit.point, hit.normal + scatter_dir);

    // vec3 scatter_dir = hit.normal + RandInHemisphere(hit.point.xy, hit.normal);
    // if (IsNearZero(scatter_dir)) scatter_dir = hit.normal;
    // scattered = CreateRay(hit.point, scatter_dir);
    attenuation = AlbedoColor(hit.index);
    return true;
}

bool ScatterMetal(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    vec3 reflected = reflect(r_in.direction, normalize(hit.normal));
    Material mat = materials[hit.index];
    float fuzz = metal[mat.attribute_index].fuzz;
    scattered = CreateRay(hit.point, reflected + fuzz * RandInHemisphere(hit.point.xy, hit.normal));
    attenuation = AlbedoColor(hit.index);
    return (dot(scattered.direction, hit.normal) > 0);
}













// Sclick Approximation
float reflectance(float cosine, float ref_ratio) {
    float r0 = pow((1 - ref_ratio) / (1 + ref_ratio), 2);
    return fma(pow((1 - cosine), 5), (1 - r0), r0);
}

bool ScatterDielectric(Ray r_in, HitRecord hit, out vec3 attenuation, out Ray scattered) {
    attenuation = vec3(1.0, 1.0, 1.0);
    Material mat = materials[hit.index];
    float ir = dielectric[mat.attribute_index].ir;
    float refraction_ratio = ir;
    if(hit.front_face) {
        refraction_ratio = (1.0/ir); 
    } 

    float cos_theta = min(dot(-r_in.direction, hit.normal), 1.0);
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    vec3 direction;
    bool cannot_refract = refraction_ratio * sin_theta > 1.0;
    bool should_reflect = reflectance(cos_theta, refraction_ratio) > Rand(hit.point.xy);
    if (cannot_refract || should_reflect) {
        direction = reflect(r_in.direction, hit.normal);
    } else {
        direction = refract(r_in.direction, hit.normal, refraction_ratio);
    }

    scattered = CreateRay(hit.point, direction);
    return true;
}
